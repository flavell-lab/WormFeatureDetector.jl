var documenterSearchIndex = {"docs":
[{"location":"curve/#Worm-Curvature-API","page":"Worm Curvature API","title":"Worm Curvature API","text":"","category":"section"},{"location":"curve/","page":"Worm Curvature API","title":"Worm Curvature API","text":"elastix_difficulty_wormcurve!\ncurve_distance","category":"page"},{"location":"curve/#WormFeatureDetector.elastix_difficulty_wormcurve!","page":"Worm Curvature API","title":"WormFeatureDetector.elastix_difficulty_wormcurve!","text":"elastix_difficulty_wormcurve!(\n    curves::Array{<:Any,1}, img1::Union{Nothing,Array{<:AbstractFloat,3}}, img2::Union{Nothing,Array{<:AbstractFloat,3}},\n    t1::Int, t2::Int, head_pos_t1::Union{Nothing,Dict}, head_pos_t2::Union{Nothing,Dict}; downscale::Int=3, \n    num_points::Int=9, headpt::Int=4, tailpt::Int=7, path_dir_fig::Union{Nothing,String}=nothing\n)\n\nComputes registration difficulty between two time points based on the worm curvature heuristic. Requires that the data be filtered in some way (eg: total-variation filtering), and that the head position of the worm is known in each time point.\n\nArguments:\n\ncurves::Array{<:Any,1}: Array of worm curves found so far. The method will attempt to find the worm's curvature in this array,   and will compute and add it to the array if not found.\nimg1::Array{<:AbstractFloat,3}: image 1 array (volume), or nothing if the curve was already computed\nimg2::Array{<:AbstractFloat,3}: image 2 array (volume), or nothing if the curve was already computed\nt1::Int: time point 1\nt2::Int: time point 2\nhead_pos_t1::Dict: head position dictionary at time point 1\nhead_pos_t2::Dict: head position dictionary at time point 2\n\nOther parameters (optional):\n\npath_dir_fig::Union{Nothing,String}: Path to save figures of worm curvature. If nothing, figures will not be generated.\ndownscale::Integer: log2(factor) by which to downscale the image before processing. Default 3 (ie: downscale by a factor of 8)\nnum_points::Integer: number of points (not including head) in generated curve. Default 9.\nheadpt::Integer: First position from head (in index of curves) to be aligned. Default 4.\ntailpt::Integer: Second position from head (in index of curves) to be aligned. Default 7.\n\n\n\n\n\nelastix_difficulty_wormcurve!(\n    curves::Array{<:Any,1}, param::Dict, param_path_fixed::Dict, param_path_moving::Dict, t1::Int, t2::Int, ch::Int;\n    save_curve_fig::Bool=false, max_fixed_t::Union{Integer,Nothing}=nothing\n)\n\nComputes registration difficulty between two time points based on the worm curvature heuristic. Requires that the data be filtered in some way (eg: total-variation filtering), and that the head position of the worm is known in each time point.\n\nArguments\n\ncurves::Dict: Array of worm curves found so far. The method will attempt to find the worm's curvature in this array,\n\nand will compute and add it to the array if not found.\n\nparam::Dict: Dictionary of parameter settings, including:\nworm_curve_n_pts: number of points (not including head) in generated curve.\nworm_curve_head_idx: First position from head (in index of curves) to be aligned.\nworm_curve_tail_idx: Second position from head (in index of curves) to be aligned.\nworm_curve_downscale: log2(factor) by which to downscale the image before processing.\nparam_path_fixed::Dict: Dictionary of paths for the fixed (t1) time point, including:\npath_dir_nrrd_filt: Path to filtered cropped NRRD files\npath_head_pos: Path to head position\npath_dir_worm_curve: Path to save worm curve images\nget_basename: Function that takes as input a time point and a channel and gives the base name of the corresponding NRRD file. \nparam_path_moving::Dict: Dictionary of paths for the moving (t2) time point, including the same keys as for the fixed dictionary.\nt1::Int: Fixed time point\nt2::Int: Moving time point\nch::Int: Channel\nsave_curve_fig::Bool (optional, default false): whether to save worm curve images\nmax_fixed_t::Union{Integer,Nothing} (optional, default nothing): If using two different data sets, the maximum time point in the fixed dataset.   Moving dataset time points will be incremented by this amount.\n\n\n\n\n\n","category":"function"},{"location":"curve/#WormFeatureDetector.curve_distance","page":"Worm Curvature API","title":"WormFeatureDetector.curve_distance","text":"curve_distance(x1_c, y1_c, x2_c, y2_c; headpt::Integer=4, tailpt::Integer=7)\n\nComputes the difficulty of an elastix transform using the heuristic that more worm-unbending is harder.\n\nArguments:\n\nx1_c: Array of x-coordinates of first worm\ny1_c: Array of y-coordinates of first worm\nx2_c: Array of x-coordinates of second worm\ny2_c: Array of y-coordinates of second worm\nheadpt::Integer: First position from head (in index of curves) to be aligned. Default 4.\ntailpt::Integer: Second position from head (in index of curves) to be aligned. Default 7.\n\n\n\n\n\n","category":"function"},{"location":"#WormFeatureDetector.jl-Documentation","page":"WormFeatureDetector.jl Documentation","title":"WormFeatureDetector.jl Documentation","text":"","category":"section"},{"location":"","page":"WormFeatureDetector.jl Documentation","title":"WormFeatureDetector.jl Documentation","text":"The WormFeatureDetector.jl package contains a collection of utilities for parameterizing frames in a freely-moving recording. The parameters are intended to describe how similar different frames are from each other, which is used in the context of the ANTSUN pipeline to determine which frames to register to each other.","category":"page"},{"location":"","page":"WormFeatureDetector.jl Documentation","title":"WormFeatureDetector.jl Documentation","text":"Pages = [\"head.md\", \"curve.md\", \"hsn.md\"]","category":"page"},{"location":"hsn/#HSN-Feature-Detection-API","page":"HSN Feature Detection API","title":"HSN Feature Detection API","text":"","category":"section"},{"location":"hsn/","page":"HSN Feature Detection API","title":"HSN Feature Detection API","text":"These methods are intended to detect HSN's soma and nerve ring projection in single-neuron low-magnification imaging.","category":"page"},{"location":"hsn/","page":"HSN Feature Detection API","title":"HSN Feature Detection API","text":"find_gut_granules\nfind_hsn\nfind_nerve_ring\nelastix_difficulty_hsn_nr","category":"page"},{"location":"hsn/#WormFeatureDetector.find_gut_granules","page":"HSN Feature Detection API","title":"WormFeatureDetector.find_gut_granules","text":"find_gut_granules(path::String, names::Array{String, 1}, threshold, density, radius; dir_nrrd=\"NRRD\", out=\"\")\n\nFinds, returns, and outputs gut granule masks for a set of images. The masks filter out the gut granules, so 1 is not a gut granule, and 0 is a gut granule.\n\nArguments\n\npath::String: working directory path; all other directory inputs are relative to this\nnames::Array{String,1}: filenames of images to process\nthreshold::Real: pixel intensity brightness value. Pixels below this intensity are excluded\ndensity::Real: density of nearby pixels that must meet the threshold for the original pixel to be counted\nradius: distances in each dimension (in pixels) away from the original pixel that are counted as nearby.   For example, radius = [3, 2, 1] would allow a distance of three pixels in the x-direction, two pixels in the y-direction,   and one pixel in the z-direction.\n\nOptional keyword arguments\n\nnrrd::String: path to NRRD directory, where the image will be found. Default \"NRRD\".\nout::String: path to output directory to store the masks. If left blank (default), images will not be written.\n\n\n\n\n\n","category":"function"},{"location":"hsn/#WormFeatureDetector.find_hsn","page":"HSN Feature Detection API","title":"WormFeatureDetector.find_hsn","text":"find_hsn(\n    path::String, frames, dir_nrrd::String, img_prefix::String, channel::Integer,\n    threshold_outer::Real, density_outer::Real, radius_outer, \n    threshold_inner::Real, density_inner::Real, radius_inner, radius_detection; outfile::String=\"\"\n)\n\nFinds location of the HSN soma in a frame. First threshold to remove densely-packed regions that might correspond to gut fluorescence or neuropil (by excluding too-dense regions), then threshold again to ensure high local density (by excluding not-dense regions). If multiple regions are still included, the larger region is chosen. Can optionally choose to output data to a file, for use with heuristics.\n\nArguments:\n\npath::String: working directory path; all other directory inputs are relative to this\nframes: frames of images to process\ndir_nrrd::String: path to NRRD directory, where the image will be found.\nimg_prefix::String: image prefix not including the timestamp. It is assumed that each frame's filename   will be, eg, img_prefix_t0123_ch2.nrrd for frame 123 with channel=2.\nchannel::Integer: channel being used.\nthreshold_outer::Real: pixel intensity brightness value. Pixels below this intensity are excluded\ndensity_outer::Real: density of nearby pixels that must meet the outer threshold for the original pixel to NOT be counted\nradius_outer: distances in each dimension (in pixels) away from the original pixel that are counted as nearby.\n\nFor example, radius = [3, 2, 1] would allow a distance of three pixels in the x-direction, two pixels in the y-direction, and one pixel in the z-direction.\n\nthreshold_inner::Real: pixel intensity brightness value. Pixels below this intensity are excluded\ndensity_inner::Real: density of nearby pixels that must meet the inner threshold for the original pixel to be counted\nradius_inner: distances in each dimension (in pixels) away from the original pixel that are counted as nearby.\n\nFor example, radius = [3, 2, 1] would allow a distance of three pixels in the x-direction, two pixels in the y-direction, and one pixel in the z-direction.\n\nradius_detection: If multiple locations remain as possible HSN locations after both thresholding steps,   the location with the most other such points within radius_detection of it is chosen. \n\nOptional keyword arguments\n\noutfile::String: path to HSN output file. If left blank (default), no output will be written.\n\n\n\n\n\n","category":"function"},{"location":"hsn/#WormFeatureDetector.find_nerve_ring","page":"HSN Feature Detection API","title":"WormFeatureDetector.find_nerve_ring","text":"find_nerve_ring(path::String, frames, dir_nrrd::String, img_prefix::String, channel::Integer, threshold::Real, region, radius; outfile::String=\"\")\n\nFinds location of the nerve ring in a frame. Can optionally output nerve ring locations to a file for use with heuristics.\n\nArguments:\n\npath::String: working directory path; all other directory inputs are relative to this\nframes: frames of images to process\ndir_nrrd::String: path to NRRD directory, where the image will be found.\nimg_prefix::String: image prefix not including the timestamp. It is assumed that each frame's filename   will be, eg, img_prefix_t0123_ch2.nrrd for frame 123 with channel=2.\nchannel::Integer: channel being used.\nthreshold::Real: pixel intensity brightness value. Pixels below this intensity are excluded\nregion: region of the image that will be searched for the nerve ring. Generically, you should try to include the nerve ring   and exclude any other regions (such as gut granules, HSN soma, etc)\nradius: The location with the most other points that meet the threshold within radius of it is chosen   as the nerve ring location.\n\nOptional keyword arguments\n\noutfile::String: path to nerve ring output file. If left blank (default), no output will be written.\n\n\n\n\n\n","category":"function"},{"location":"hsn/#WormFeatureDetector.elastix_difficulty_hsn_nr","page":"HSN Feature Detection API","title":"WormFeatureDetector.elastix_difficulty_hsn_nr","text":"elastix_difficulty_hsn_nr(\n    rootpath::String, frame1::Integer, frame2::Integer, \n    hsn_location_file::String, nr_location_file::String; nr_weight::Real=1\n)\n\nComputes registration difficulty between two frames based on the HSN and nerve ring locations\n\nArguments:\n\nrootpath::String: working directory path; all other directory inputs are relative to this\nframe1::Integer: first frame\nframe2::Integer: second frame\nhsn_location_file::String: path to file containing HSN locations\nnr_location_file::String: path to file containing nerve ring locations\n\nHeuristic parameters (optional):\n\nnr_weight::Real: weight of nerve ring location relative to HSN location. Default 1.\n\n\n\n\n\n","category":"function"}]
}
